{"version":3,"sources":["../../src/model/Mocker.js"],"names":["fs","require","path","_","fsHandler","MockerConfig","MockModule","gConfig","Mocker","basePath","config","join","name","basename","mockModuleList","_getMockModuleList","opts","merge","search","getAll","globs","MOCK_MODULES","forEach","item","relativePath","requireModulePath","module","isDirectory","existsSync","push","exports"],"mappings":";;;;;;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,IAAIF,QAAQ,QAAR,CAAV;AACA,IAAMG,YAAYH,QAAQ,YAAR,CAAlB;;AAEA,IAAMI,eAAeJ,QAAQ,gBAAR,CAArB;AACA,IAAMK,aAAaL,QAAQ,cAAR,CAAnB;;AAEA,IAAMM,UAAUN,QAAQ,WAAR,CAAhB;;IAEMO,M;AACJ;;;;;AAKA,kBAAYC,QAAZ,EAAsB;AAAA;;AACpB,SAAKA,QAAL,GAAgBA,QAAhB;;AAEA;AACA,QAAMC,SAAST,QAAQC,KAAKS,IAAL,CAAU,KAAKF,QAAf,EAAyB,UAAzB,CAAR,CAAf;;AAEA;AACA,SAAKG,IAAL,GAAYF,OAAOE,IAAP,IAAeV,KAAKW,QAAL,CAAc,KAAKJ,QAAnB,CAA3B;;AAEA;AACA,SAAKK,cAAL,GAAsB,KAAKC,kBAAL,EAAtB;;AAEA;AACA,SAAKL,MAAL,GAAc,IAAIL,YAAJ,CAAiB,KAAKO,IAAtB,EAA4BF,MAA5B,EAAoC,KAAKI,cAAzC,CAAd;AACD;;;;iCAEYE,I,EAAM;AACjB,WAAKN,MAAL,GAAcP,EAAEc,KAAF,CAAQ,EAAR,EAAY,KAAKP,MAAjB,EAAyBM,IAAzB,CAAd;AACD;;;yCAEoB;AAAA;;AACnB,UAAIF,iBAAiB,EAArB;;AAEA;AACAV,gBAAUc,MAAV,CAAiBC,MAAjB,CAAwB,KAAKV,QAA7B,EAAuC,EAAEW,OAAO,CAACb,QAAQc,YAAR,GAAuB,IAAxB,CAAT,EAAvC,EAAiFC,OAAjF,CAAyF,UAACC,IAAD,EAAU;AACjG;AACA,YAAIX,OAAOV,KAAKW,QAAL,CAAcU,KAAKC,YAAnB,EAAiC,KAAjC,CAAX;;AAEA;AACAZ,eAAOV,KAAKW,QAAL,CAAcD,IAAd,EAAoB,OAApB,CAAP;;AAEA;;AAEA,YAAIa,oBAAoBvB,KAAKS,IAAL,CAAU,MAAKF,QAAf,EAAyBF,QAAQc,YAAjC,EAA+CT,IAA/C,CAAxB;;AAEA,YAAIc,SAASzB,QAAQwB,iBAAR,CAAb;;AAEA;AACA,YAAIf,eAAJ;AACA,YAAIa,KAAKI,WAAL,OAAuB3B,GAAG4B,UAAH,CAAc1B,KAAKS,IAAL,CAAUc,iBAAV,EAA6B,aAA7B,CAAd,KAA8DzB,GAAG4B,UAAH,CAAc1B,KAAKS,IAAL,CAAUc,iBAAV,EAA6B,WAA7B,CAAd,CAArF,CAAJ,EAAoJ;AAClJf,mBAAST,QAAQC,KAAKS,IAAL,CAAUc,iBAAV,EAA6B,QAA7B,CAAR,CAAT;AACD;;AAEDX,uBAAee,IAAf,CAAoB,IAAIvB,UAAJ,CAAeM,IAAf,EAAqBc,MAArB,EAA6BhB,MAA7B,CAApB;AACD,OApBD;;AAsBA,aAAOI,cAAP;AACD;;;;;;AAGHY,OAAOI,OAAP,GAAiBtB,MAAjB","file":"Mocker.js","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst _ = require('lodash');\nconst fsHandler = require('fs-handler');\n\nconst MockerConfig = require('./MockerConfig');\nconst MockModule = require('./MockModule');\n\nconst gConfig = require('../config');\n\nclass Mocker {\n  /**\n   * 构造函数\n   *\n   * @param {String} basePath mocker 的绝对路径\n   */\n  constructor(basePath) {\n    this.basePath = basePath;\n\n    // config.json 的内容\n    const config = require(path.join(this.basePath, './config'));\n\n    // 优先使用 config.name，其次是模块的文件夹名\n    this.name = config.name || path.basename(this.basePath);\n\n    // mock module 配置列表\n    this.mockModuleList = this._getMockModuleList();\n\n    // mocker config 配置参数\n    this.config = new MockerConfig(this.name, config, this.mockModuleList);\n  }\n\n  updateConfig(opts) {\n    this.config = _.merge({}, this.config, opts);\n  }\n\n  _getMockModuleList() {\n    let mockModuleList = [];\n\n    // 1. 获取所有的 mocker，约定：this.basePath 的每个子目录都是一个独立的 mocker\n    fsHandler.search.getAll(this.basePath, { globs: [gConfig.MOCK_MODULES + '/*'] }).forEach((item) => {\n      // 模块名字，默认取文件夹或文件名\n      let name = path.basename(item.relativePath, '.js');\n\n      // 注意也可能是 json 文件\n      name = path.basename(name, '.json');\n\n      // console.log('\\n找到 mock module ：', name, item);\n\n      let requireModulePath = path.join(this.basePath, gConfig.MOCK_MODULES, name);\n\n      let module = require(requireModulePath);\n\n      // 是否存在配置文件\n      let config;\n      if (item.isDirectory() && (fs.existsSync(path.join(requireModulePath, 'config.json')) || fs.existsSync(path.join(requireModulePath, 'config.js')))) {\n        config = require(path.join(requireModulePath, 'config'));\n      }\n\n      mockModuleList.push(new MockModule(name, module, config));\n    });\n\n    return mockModuleList;\n  }\n}\n\nmodule.exports = Mocker;"]}