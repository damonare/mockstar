{"version":3,"sources":["../../src/model/MockerConfig.js"],"names":["_","require","MockerConfig","handlerName","config","mockModuleList","name","route","routeExtra","indexOf","description","disable","defaultModule","activeModule","length","firstMockModuleName","activeItem","filter","item","method","plugin","priority","tags","union","module","exports"],"mappings":";;;;AAAA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;;IAEMC,Y;AACJ;;;;;;;;;;;;;;;;;;AAkBA,sBAAYC,WAAZ,EAA2D;AAAA;;AAAA,MAAlCC,MAAkC,uEAAzB,EAAyB;AAAA,MAArBC,cAAqB,uEAAJ,EAAI;;AAAA;;AACzD;AACA,OAAKC,IAAL,GAAYH,WAAZ;;AAEA;AACA,OAAKI,KAAL,GAAaH,OAAOG,KAAP,IAAgB,EAA7B;;AAEA;AACA,OAAKC,UAAL,GAAkBJ,OAAOI,UAAP,IAAqB,EAAvC;;AAEA;AACA,MAAI,KAAKD,KAAL,IAAc,KAAKA,KAAL,CAAWE,OAAX,CAAmB,GAAnB,MAA4B,CAA9C,EAAiD;AAC/C,SAAKF,KAAL,GAAa,MAAM,KAAKA,KAAxB;AACD;;AAED;AACA,OAAKG,WAAL,GAAmBN,OAAOM,WAAP,IAAsB,KAAKJ,IAA9C;;AAEA;AACA;AACA,OAAKK,OAAL,GAAeP,OAAOO,OAAP,IAAkB,KAAjC;;AAEA;AACA,OAAKC,aAAL,GAAqBR,OAAOQ,aAAP,IAAwB,EAA7C;;AAEA;AACA;AACA,OAAKC,YAAL,GAAoBT,OAAOS,YAAP,IAAuB,KAAKD,aAAhD;;AAGA,MAAIP,kBAAkBA,eAAeS,MAArC,EAA6C;AAC3C,QAAIC,sBAAsBV,eAAe,CAAf,EAAkBC,IAA5C;;AAEA,QAAI,CAAC,KAAKO,YAAV,EAAwB;AACtB;AACA,WAAKA,YAAL,GAAoBE,mBAApB;AACD,KAHD,MAGO;AACL;AACA,UAAIC,aAAaX,eAAeY,MAAf,CAAsB,UAACC,IAAD,EAAU;AAC/C,eAAOA,KAAKZ,IAAL,KAAc,MAAKO,YAA1B;AACD,OAFgB,EAEd,CAFc,CAAjB;;AAIA,UAAI,CAACG,UAAL,EAAiB;AACf,aAAKH,YAAL,GAAoBE,mBAApB;AACD;AACF;AACF;;AAED;AACA,OAAKI,MAAL,GAAcf,OAAOe,MAAP,IAAiB,KAA/B;;AAEA;AACA,OAAKC,MAAL,GAAchB,OAAOgB,MAAP,IAAiB,KAA/B;;AAEA;AACA,OAAKC,QAAL,GAAgBjB,OAAOiB,QAAP,IAAmB,CAAnC;;AAEA;AACA,OAAKC,IAAL,GAAYtB,EAAEuB,KAAF,CAAQ,CAAC,IAAD,CAAR,EAAgBnB,OAAOkB,IAAP,IAAe,EAA/B,CAAZ;;AAEA;AACA;AACD,C;;AAGHE,OAAOC,OAAP,GAAiBvB,YAAjB","file":"MockerConfig.js","sourcesContent":["const _ = require('lodash');\n\nclass MockerConfig {\n  /**\n   * 构造函数\n   *\n   * @param {String} handlerName 名字\n   * @param {Object} config config.json 中的值\n   * @param {String} [config.route] 需要处理的路由，只有匹配到这个路由，才会被处理\n   * @param {Object} [config.routeExtra] 额外的路由匹配参数\n   * @param {String} [config.name] 名字\n   * @param {String} [config.description] 简要描述\n   * @param {Boolean} [config.disable] 此mocker是否为禁用状态，一旦设置为 true，则将忽略该mocker，而是去请求现网\n   * @param {String} [config.activeModule] 当前激活的 mock module 名字\n   * @param {String} [config.defaultModule] 默认初始化时激活的 mock module 名字\n   * @param {String} [config.method] http 请求方式，包括 get(默认) 和 post\n   * @param {String} [config.plugin] 数据mock类型，包括 xhr(默认) 和 async\n   * @param {Number} [config.priority] 管理后台列表中排序的权重，值越大则越排在前面\n   * @param {Array} [config.tags] 标签，用于过滤，字符串数组\n   * @param {Array} [mockModuleList] mock module 数组\n   */\n  constructor(handlerName, config = {}, mockModuleList = []) {\n    // 名字，注意名字不能够再被修改，即忽略 config.name\n    this.name = handlerName;\n\n    // 需要处理的路由，只有匹配到这个路由，才会被处理\n    this.route = config.route || '';\n\n    // 额外的路由匹配参数\n    this.routeExtra = config.routeExtra || {};\n\n    // #57 可能route中不以 / 开头，此时需要增加之\n    if (this.route && this.route.indexOf('/') !== 0) {\n      this.route = '/' + this.route;\n    }\n\n    // 简要描述\n    this.description = config.description || this.name;\n\n    // 此mocker是否为禁用状态，一旦设置为 true，则将忽略该mocker，而是去请求现网\n    // 该字段是可以被 CGI 修改的。\n    this.disable = config.disable || false;\n\n    // 默认的的 mock module 名字\n    this.defaultModule = config.defaultModule || '';\n\n    // 当前激活的 mock module 名字\n    // 该字段是可以被 CGI 修改的。因此优先使用配置项中的 activeModule，其次才是 defaultModule\n    this.activeModule = config.activeModule || this.defaultModule;\n\n\n    if (mockModuleList && mockModuleList.length) {\n      let firstMockModuleName = mockModuleList[0].name;\n\n      if (!this.activeModule) {\n        // activeModule 如果不存在，则默认设置 mock module 列表中的第一个\n        this.activeModule = firstMockModuleName;\n      } else {\n        // activeModule 如果存在，但并没有在新的列表中，有可能是改名或者删除了，则默认设置 mock module 列表中的第一个\n        let activeItem = mockModuleList.filter((item) => {\n          return item.name === this.activeModule;\n        })[0];\n\n        if (!activeItem) {\n          this.activeModule = firstMockModuleName;\n        }\n      }\n    }\n\n    // http 请求方式，包括 get(默认) 和 post\n    this.method = config.method || 'get';\n\n    // 数据mock类型，包括 xhr(默认) 和 async\n    this.plugin = config.plugin || 'xhr';\n\n    // 管理后台列表中排序的权重，值越大则越排在前面\n    this.priority = config.priority || 0;\n\n    // 标签，用于过滤，字符串数组\n    this.tags = _.union(['全部'], config.tags || []);\n\n    // 最后更新的时间\n    // this.lastModified = Date.now();\n  }\n}\n\nmodule.exports = MockerConfig;"]}